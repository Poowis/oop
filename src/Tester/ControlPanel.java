/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Tester;

import Engine.Data;
import Engine.DataUtil;
import Engine.Main;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Poowis
 */
public class ControlPanel extends javax.swing.JPanel {

    private Main main;
    private JTable table;

    /**
     * Creates new form ControlPanel
     */
    public ControlPanel(Main main, JTable table) {
        this.main = main;
        this.table = table;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        applyOutput = new javax.swing.JButton();
        header = new javax.swing.JLabel();
        alert = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        selects = new javax.swing.JTextArea();
        selectsApply = new javax.swing.JButton();
        line = new javax.swing.JCheckBox();
        bar = new javax.swing.JCheckBox();
        pie = new javax.swing.JCheckBox();
        avg = new javax.swing.JCheckBox();
        mean = new javax.swing.JCheckBox();
        mode = new javax.swing.JCheckBox();
        max = new javax.swing.JCheckBox();
        min = new javax.swing.JCheckBox();
        sd = new javax.swing.JCheckBox();
        variant = new javax.swing.JCheckBox();
        export = new javax.swing.JButton();
        percent = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Clear = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(300, 500));
        setPreferredSize(new java.awt.Dimension(300, 500));

        applyOutput.setText("Apply");
        applyOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyOutputActionPerformed(evt);
            }
        });

        header.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        header.setText("Control Panel");

        alert.setEditable(false);
        alert.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        alert.setText("Alert");

        jLabel2.setText("Interest Points");

        selects.setColumns(20);
        selects.setRows(5);
        selects.setText("Sample:\ntime = Mon\nid = 607.*\nsale > 100\nsale -10 - -20\n\n");
        jScrollPane1.setViewportView(selects);

        selectsApply.setText("Apply");
        selectsApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectsApplyActionPerformed(evt);
            }
        });

        line.setSelected(true);
        line.setText("Line Graph");

        bar.setSelected(true);
        bar.setText("Bar Chart");

        pie.setSelected(true);
        pie.setText("Pie Chart");

        avg.setSelected(true);
        avg.setText("Average");

        mean.setSelected(true);
        mean.setText("Mean");

        mode.setSelected(true);
        mode.setText("Mode");

        max.setSelected(true);
        max.setText("Max");

        min.setSelected(true);
        min.setText("Min");

        sd.setSelected(true);
        sd.setText("Standard deviation");

        variant.setSelected(true);
        variant.setText("Variant");

        export.setText("Export as Report");

        percent.setSelected(true);
        percent.setText("Percentile");

        jLabel3.setText("Output Graph");

        jLabel4.setText("Process into");

        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(header)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(alert)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectsApply)
                                .addGap(18, 18, 18)
                                .addComponent(Clear)))
                        .addGap(0, 154, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(applyOutput))
                            .addComponent(bar)
                            .addComponent(pie)
                            .addComponent(line)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(export)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4)
                            .addComponent(variant)
                            .addComponent(sd)
                            .addComponent(avg)
                            .addComponent(mode)
                            .addComponent(mean)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(min)
                                .addGap(18, 18, 18)
                                .addComponent(max))
                            .addComponent(percent))
                        .addGap(39, 39, 39))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(header)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectsApply)
                    .addComponent(Clear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(line)
                    .addComponent(max)
                    .addComponent(min))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bar)
                    .addComponent(avg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pie)
                    .addComponent(mean))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(variant)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(percent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyOutput)
                    .addComponent(export))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(alert, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        applyOutput.getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    private void applyOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyOutputActionPerformed
        // TODO add your handling code here:
        JFrame popup = new JFrame();
        popup.setSize(500, 500);
        popup.setLocationRelativeTo(null);
        popup.setVisible(true);
    }//GEN-LAST:event_applyOutputActionPerformed

    private void selectsApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectsApplyActionPerformed
        // TODO add your handling code here:
        setTable(DataUtil.select(main.getCurrentWS().getData(), selects.getText()));
        main.getCurrentWS().setSettings(getSettings());
    }//GEN-LAST:event_selectsApplyActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        // TODO add your handling code here:
        selects.setText("");
        setTable(main.getCurrentWS().getData());
    }//GEN-LAST:event_ClearActionPerformed

    private void setTable(Data data) {
        DefaultTableModel model = new DefaultTableModel();
        for (Object column : data.getMetaInfo()) {
            model.addColumn(column);
        }
        for (int i = 0; i < data.getDataSize().get(0); i++) {
            model.addRow(new Object[0]);
            for (int j = 0; j < data.getDataSize().get(1); j++) {
                model.setValueAt(data.get(i, j), i, j);
            }
        }
        table.setModel(model);
    }

    public void alert(String text) {
        alert.setText(text);
    }

    public HashMap<String, Object> getSettings() {
        HashMap settings = new HashMap();
        settings.put("selects", selects.getText());
        settings.put("line", line.isSelected());
        settings.put("bar", bar.isSelected());
        settings.put("pie", pie.isSelected());
        settings.put("min", min.isSelected());
        settings.put("max", max.isSelected());
        settings.put("avg", avg.isSelected());
        settings.put("mean", mean.isSelected());
        settings.put("mode", mode.isSelected());
        settings.put("sd", sd.isSelected());
        settings.put("variant", variant.isSelected());
        settings.put("percent", percent.isSelected());
        return settings;
    }

    public void setSettings(HashMap<String, Object> settings) {
        selects.setText((String) settings.get("selects"));
        line.setSelected((boolean) settings.get("line"));
        bar.setSelected((boolean) settings.get("bar"));
        pie.setSelected((boolean) settings.get("pie"));
        min.setSelected((boolean) settings.get("min"));
        max.setSelected((boolean) settings.get("max"));
        avg.setSelected((boolean) settings.get("avg"));
        mean.setSelected((boolean) settings.get("mean"));
        mode.setSelected((boolean) settings.get("mode"));
        sd.setSelected((boolean) settings.get("sd"));
        variant.setSelected((boolean) settings.get("variant"));
        percent.setSelected((boolean) settings.get("percent"));
    }

    public void setDefault() {
        selects.setText("Sample");
        line.setSelected(true);
        bar.setSelected(true);
        pie.setSelected(true);
        min.setSelected(true);
        max.setSelected(true);
        avg.setSelected(true);
        mean.setSelected(true);
        mode.setSelected(true);
        sd.setSelected(true);
        variant.setSelected(true);
        percent.setSelected(true);
    }
    
    public void setHeader() {
        header.setText(main.getCurrentWS().toString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clear;
    private javax.swing.JTextField alert;
    private javax.swing.JButton applyOutput;
    private javax.swing.JCheckBox avg;
    private javax.swing.JCheckBox bar;
    private javax.swing.JButton export;
    private javax.swing.JLabel header;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox line;
    private javax.swing.JCheckBox max;
    private javax.swing.JCheckBox mean;
    private javax.swing.JCheckBox min;
    private javax.swing.JCheckBox mode;
    private javax.swing.JCheckBox percent;
    private javax.swing.JCheckBox pie;
    private javax.swing.JCheckBox sd;
    private javax.swing.JTextArea selects;
    private javax.swing.JButton selectsApply;
    private javax.swing.JCheckBox variant;
    // End of variables declaration//GEN-END:variables
}
